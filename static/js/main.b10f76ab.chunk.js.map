{"version":3,"sources":["data/dummyData.js","data/dummyUserData.js","Dashboard.js","VoiceRecorder.js","Question.jsx","Prom.js","PatientDashboard.jsx","Router.js","NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["jsonData","require","get_breastcancerPROM","patientName","patientID","questionsObject","type","questions","JSON","stringify","users","userName","userID","conditions","CHART_COLORS","data","labels","plotting_data","datasets","label","mean","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","Dashboard","className","style","width","margin","VoiceRecorder","props","state","audioDetails","url","blob","chunks","duration","h","m","s","this","setState","file","formData","FormData","append","fetch","method","body","record","audioURL","showUIAudio","handleAudioStop","handleAudioUpload","handleReset","mimeTypeToUseWhenRecording","React","Component","Question","question","questionObj","Counter","sectionLength","index","progressPercentage","parseInt","toFixed","marks","answers","forEach","answer","push","value","number","text","console","log","id","ProgressBar","now","Box","sx","Slider","getAriaValueText","step","defaultValue","valueLabelDisplay","min","max","length","Accordion","Item","eventKey","Header","alt","src","Body","accept","capture","Button","variant","onClick","e","preventDefault","document","getElementById","scrollIntoView","behavior","handleClick_next","handleClick_prev","Prom","prom","questionsCounter","sections","map","section","sectionIndex","tytle","Badge","bg","size","PatientDashboard","proms","user","Router","path","render","arguments","NavBar","Navbar","expand","Container","Brand","href","Toggle","Collapse","Nav","to","withRouter","parse","useState","isLogedIn","setIsLogedIn","setUser","setProms","history","useHistory","useEffect","localStorage","getItem","userObject","find","elem","getProms","obj","element","setItem","handleCLick","onSubmit","target","nameInput","idInput","innerText","handleSubmit","InputGroup","Text","FormControl","name","required","placeholder","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.b10f76ab.chunk.js","sourcesContent":["const breastcancerPROM = {\r\n    sections:[\r\n    {tytle:'NoTitle',\r\n    questions:[{\r\n        type:'MultiAnswers',\r\n        text:'Do you have any trouble doing strenuous activities, like carrying a heavy shopping bag or a suitcase?',\r\n        answers:[{text: 'Not at all', number:'1'},{text:'A little',number:'2'}]\r\n    },\r\n    {\r\n        type:'MultiAnswers',\r\n        text:'Do you have any trouble taking a long walk?',\r\n        answers:[{text: 'Not at all', number:'1'},{text:'A little',number:'2'}]\r\n    },\r\n    ],},\r\n    {tytle:'During the past week:',    \r\n    questions:[{\r\n            type:'MultiAnswers',\r\n            text:'Were you limited in doing either your work or other daily activities?',\r\n            answers:[{text: 'Not at all', number:'1'},\r\n            {text:'A little',number:'2'}]\r\n        },\r\n        {\r\n            type:'MultiAnswers',\r\n            text:'Were you limited in pursuing your hobbies or other leisure time activities?',\r\n            answers:[\r\n                {text: 'Not at all', number:'1'},\r\n                {text:'A little',number:'2'}\r\n                ]\r\n        },\r\n        ]\r\n    }\r\n\r\n]\r\n    \r\n}\r\n\r\nconst jsonData = require('./ICHOM_PROM_breast_cancer.json')\r\nexport const get_breastcancerPROM = (patientName,patientID )=>{\r\n    const questionsObject = { patientName,\r\n                                 patientID,\r\n                                 type:'breastcancerPROM',\r\n                                 questions:jsonData }\r\n    return JSON.stringify(questionsObject);\r\n}\r\n\r\nexport const get_lungcancerPROM = (patientName,patientID )=>{\r\n    const questionsObject = {patientName,\r\n                                patientID,\r\n                                type:'get_lungcancerPROM',\r\n                                questions:breastcancerPROM }\r\n    return JSON.stringify(questionsObject);\r\n}\r\n\r\nexport const get_coloncancerPROM = (patientName,patientID )=>{\r\n    const questionsObject = { patientName,\r\n                                patientID,\r\n                                type:'coloncancerPROM',\r\n                                questions:breastcancerPROM  }\r\n    return JSON.stringify(questionsObject);\r\n}\r\n\r\n","const users =[\r\n    {userName:'patient1',\r\n    userID:'1',\r\n    conditions:['breastCancer']},\r\n    {userName:'patient2',\r\n    userID:'2',\r\n    conditions:['lungCancer']},\r\n    {userName:'patient3',\r\n    userID:'3',\r\n    conditions:['colonCancer']},\r\n    {userName:'patient4',\r\n    userID:'4',\r\n    conditions:['lungCancer','colonCancer']},\r\n]\r\n\r\nexport default users;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport * as plotting_data from './data/plotting_data.json'\r\n\r\nconst CHART_COLORS = {\r\n    red: 'rgb(255, 99, 132)',\r\n    orange: 'rgb(255, 159, 64)',\r\n    yellow: 'rgb(255, 205, 86)',\r\n    green: 'rgb(75, 192, 192)',\r\n    blue: 'rgb(54, 162, 235)',\r\n    purple: 'rgb(153, 102, 255)',\r\n    grey: 'rgb(201, 203, 207)',\r\n    pink: 'rgb(222, 111, 155)'\r\n};\r\n\r\nconst data = {\r\n    labels: plotting_data.survey_dates,\r\n    datasets: [\r\n        {\r\n            label: 'Energy',\r\n            data: plotting_data.energy.mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.red,\r\n            borderColor: CHART_COLORS.red,\r\n        },\r\n        {\r\n            label: 'Chest',\r\n            data: plotting_data.chest.mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.orange,\r\n            borderColor: CHART_COLORS.orange,\r\n        },\r\n        {\r\n            label: 'General',\r\n            data: plotting_data.general.mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.yellow,\r\n            borderColor: CHART_COLORS.yellow,\r\n        },\r\n        {\r\n            label: 'Food',\r\n            data: plotting_data.food.mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.green,\r\n            borderColor: CHART_COLORS.green,\r\n        },\r\n        {\r\n            label: 'Mental Health',\r\n            data: plotting_data[\"mental health\"].mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.blue,\r\n            borderColor: CHART_COLORS.blue,\r\n        },\r\n        {\r\n            label: 'Social Life',\r\n            data: plotting_data[\"social life\"].mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.purple,\r\n            borderColor: CHART_COLORS.purple,\r\n        },\r\n        {\r\n            label: 'Eating',\r\n            data: plotting_data.eating.mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.grey,\r\n            borderColor: CHART_COLORS.grey,\r\n        },\r\n        {\r\n            label: 'Head',\r\n            data: plotting_data.head.mean,\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.pink,\r\n            borderColor: CHART_COLORS.pink,\r\n        },\r\n    ],\r\n};\r\n\r\nconst options = {\r\n    scales: {\r\n        yAxes: [\r\n            {\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst Dashboard = () => (\r\n    <>\r\n        <div className='header'>\r\n            <h1>Health history</h1>\r\n        </div>\r\n        <div style={{ width: '50%', margin: 'auto' }}>\r\n            <Line data={data} options={options} />\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { Recorder } from 'react-voice-recorder'\r\n\r\nimport 'react-voice-recorder/dist/index.css'\r\nimport './VoiceRecorder.css';\r\n\r\n\r\nclass VoiceRecorder extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      audioDetails: {\r\n        url: null,\r\n        blob: null,\r\n        chunks: null,\r\n        duration: {\r\n          h: 0,\r\n          m: 0,\r\n          s: 0\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleAudioStop(data) {\r\n    this.setState({ audioDetails: data });\r\n  }\r\n\r\n  handleAudioUpload(file) {\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    fetch('/upload/image', {method: \"POST\", body: formData});\r\n  }\r\n\r\n  handleReset() {\r\n    const reset = {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0\r\n      }\r\n    };\r\n    this.setState({ audioDetails: reset });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ width: '50%', margin: 'auto' }}>\r\n          <Recorder\r\n            record={true}\r\n            // title={\"\"}\r\n            audioURL={this.state.audioDetails.url}\r\n            showUIAudio\r\n            handleAudioStop={data => this.handleAudioStop(data)}\r\n            handleAudioUpload={data => this.handleAudioUpload(data)}\r\n            handleReset={() => this.handleReset()}\r\n            mimeTypeToUseWhenRecording={`audio/webm`}\r\n          />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VoiceRecorder;","import React, { useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\nimport VoiceRecorder from './VoiceRecorder';\r\nimport { Accordion, Button,ProgressBar } from 'react-bootstrap';\r\n\r\nfunction Question(props) {\r\n  const {questionObj : question,Counter ,sectionLength ,index} = props;\r\n  const progressPercentage = (((parseInt(index, 10) +1 )/ parseInt(sectionLength, 10)) *100).toFixed(1)\r\n  const marks = []\r\n\r\n  question.answers.forEach(answer => {\r\n    marks.push({\r\n      value: parseInt(answer.number, 10),\r\n      label: answer.text,\r\n    })\r\n  }) \r\n    \r\n  console.log('marks', marks)\r\n   \r\n  /*const marks = [\r\n    {\r\n      value: question.answers[0].number,\r\n      label: question.answers[0].text,\r\n    },\r\n    {\r\n      value: question.answers[ question.answers.length -1].number,\r\n      label: question.answers[ question.answers.length -1].text,\r\n    },\r\n  ];*/\r\n  \r\n  function valuetext(value) {\r\n    return value;\r\n  }\r\n\r\nconst handleClick_next = e=>{\r\n  e.preventDefault();\r\n  document?.getElementById?.(`question${Counter+1}`)?.scrollIntoView?.({behavior: \"smooth\"});\r\n}\r\n\r\nconst handleClick_prev = e=>{\r\n  e.preventDefault();\r\n  document?.getElementById?.(`question${Counter-1}`)?.scrollIntoView?.({behavior: \"smooth\"});\r\n}\r\n  return (\r\n    <div id={`question${Counter}`}className=\"question\">\r\n      <p>Progress for that section:</p>\r\n      <ProgressBar now={progressPercentage} label={`${progressPercentage }%`} />\r\n        <p className=\"questionText\">{question.text}</p>\r\n    <div className=\"sliedContainer\">\r\n    <Box sx={{ width: 300 }}>\r\n      <Slider\r\n        aria-label=\"Custom marks\"\r\n        getAriaValueText={valuetext}\r\n        step={null}\r\n        defaultValue={1}\r\n        valueLabelDisplay=\"auto\"\r\n        marks={marks}\r\n        min={parseInt(question.answers[0].number, 10)}\r\n        max={parseInt(question.answers[ question.answers.length -1].number, 10)}\r\n      />\r\n    </Box>\r\n    </div>\r\n    <div>\r\n    \r\n   \r\n    <div className=\"questionMedia\">\r\n    </div>\r\n    </div>\r\n\r\n    <Accordion >\r\n  <Accordion.Item eventKey=\"0\">\r\n    <Accordion.Header>\r\n      <input  type=\"image\"\r\n            alt=\"Record\"\r\n            src=\"https://raw.githubusercontent.com/AhmedMohamedG/hackzurich2021/master/public/cam.png\"\r\n            />\r\n    </Accordion.Header>\r\n    <Accordion.Body>\r\n        <input type=\"file\" accept=\"image/*\" capture/>\r\n    </Accordion.Body>\r\n  </Accordion.Item>\r\n  <Accordion.Item eventKey=\"1\">\r\n    <Accordion.Header>\r\n    <input  type=\"image\"\r\n            alt=\"Record\"\r\n            src=\"https://raw.githubusercontent.com/AhmedMohamedG/hackzurich2021/master/public/mic.png\"\r\n            />\r\n    \r\n    </Accordion.Header>\r\n    <Accordion.Body>\r\n          <VoiceRecorder />\r\n    </Accordion.Body>\r\n  </Accordion.Item>\r\n</Accordion>\r\n\r\n<Button \r\nvariant=\"primary\"\r\nclassName='questionButtons'\r\nonClick={e => handleClick_next(e)}>\r\n  Next\r\n</Button>\r\n<Button \r\nvariant=\"primary\"\r\nclassName='questionButtons'\r\nonClick={e => handleClick_prev(e)}>\r\n  Previous\r\n</Button>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Question;","import React, { useState } from 'react';\r\nimport Question from './Question';\r\nimport { Badge } from 'react-bootstrap';\r\n\r\nfunction Prom(props) {\r\n  const {prom} = props;\r\n  let questionsCounter = 0;\r\n  return (\r\n    <div className=\"promContanier\">\r\n        {prom.questions.sections.map((section,index )=>{\r\n            const sectionIndex = index;\r\n            return(\r\n                <div className=\"QuestionsSection\">\r\n                {section?.tytle !== 'NoTitle'?<h1>{ section?.tytle}</h1>:''}\r\n                {section.questions.map((question,index) => {\r\n                    questionsCounter++\r\n                    return <Question\r\n                            sectionLength = {section.questions.length} \r\n                            index = {index}\r\n                            Counter = {questionsCounter}\r\n                            key={`${sectionIndex}-${index}`}\r\n                            questionObj={question} />\r\n                })}\r\n                </div>\r\n\r\n            )\r\n        })}\r\n        <Badge bg=\"success\"  size=\"xxl\">Thanks for filling the eProm</Badge>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Prom;","import React, { useState } from 'react';\r\nimport Prom from './Prom.js'\r\nfunction PatientDashboard(props) {\r\n  const {user, proms} = props[0];\r\n  \r\n  return (\r\n    <div className=\"Patientdashboard\">\r\n{proms.map(prom =>{\r\n    return <Prom prom={prom} />\r\n})\r\n}    </div>\r\n  );\r\n}\r\n\r\nexport default PatientDashboard;\r\n","import React , {Component,Fragment} from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport PatientDashboard from './PatientDashboard';\r\nimport VoiceRecorder from './VoiceRecorder';\r\n\r\nimport {\r\n  BrowserRouter ,\r\n  Route,\r\n  Link,\r\n  Switch,\r\n  Redirect,\r\n  withRouter \r\n} from 'react-router-dom'\r\n\r\n\r\nfunction Router(props) {\r\n\r\n  return(\r\n      <Fragment>\r\n          <div className=\"main\">\r\n\t\t\t<Switch>\r\n\t\t\t<Route path={`/dashboard`}  \r\n\t\t\t   render={(...props) => { return <Dashboard {...arguments}\r\n\t\t\t\t  />} \r\n\t\t\t\t  }/>\r\n            <Route path={`/Patientdashboard`}  \r\n\t\t\t   render={(...props) => { return <PatientDashboard {...arguments}\r\n\t\t\t\t  />} \r\n\t\t\t\t  }/>\r\n            <Route path={`/voicerecoreder`}  \r\n\t\t\t   render={(...props) => { return <VoiceRecorder {...arguments}\r\n\t\t\t\t  />} \r\n\t\t\t\t  }/> \r\n            </Switch>\r\n          </div>\r\n      </Fragment>\r\n      )\r\n}\r\nexport default Router;\r\n      \r\n\r\n      ","import { Navbar,Container, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\r\nimport React, { useState } from 'react';\r\n\r\nimport { Link} from 'react-router-dom'\r\n\r\nfunction NavBar(){\r\n\r\n    return(\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#\">ePROM Plus</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n              <Link className='navEl' to=\"/dashboard\">Dashboard</Link>\r\n              <Link className='navEl' to=\"/voicerecoreder\">Voice</Link>\r\n              <Link className='navEl' to=\"/Patientdashboard\">PROMs</Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    )\r\n\r\n}\r\n\r\nexport default NavBar;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {get_breastcancerPROM} from './data/dummyData';\r\nimport users from './data/dummyUserData';\r\nimport React, { useState,useEffect } from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport VoiceRecorder from './VoiceRecorder';\r\nimport PatientDashboard from './PatientDashboard'\r\nimport Router from './Router'\r\n//import Button from '@mui/material/Button';\r\nimport { withRouter } from 'react-router';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport NavBar from './NavBar'\r\nimport { Accordion,FormControl, Button,InputGroup } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n  console.log('json data', JSON.parse(get_breastcancerPROM('patient1','patient1')))\r\n  const [isLogedIn, setIsLogedIn] = useState(false);\r\n  const [user, setUser] = useState(false);\r\n  const [proms, setProms] = useState([]);\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    const userName = localStorage.getItem('userName');\r\n    const userID = localStorage.getItem('userID');\r\n    const userObject = users.find(elem => elem.userName === userName && elem.userID === userID )\r\n    if(userObject){\r\n      setIsLogedIn(true);\r\n      setUser(userObject);\r\n      getProms(userObject);\r\n      history.push('/Patientdashboard');\r\n    }\r\n  },[]);\r\n\r\n  const getProms = (obj) =>{\r\n    const {userName , userID , conditions} = obj;\r\n    const proms = [];\r\n    conditions.forEach(element => {\r\n  \r\n        if(element ==='breastCancer'){\r\n              proms.push(JSON.parse(get_breastcancerPROM(userName,userID)))\r\n              }\r\n        if(element === 'lungCancer'){\r\n          proms.push(JSON.parse(get_breastcancerPROM(userName,userID)))\r\n          }\r\n        if(element === 'colonCancer') {\r\n          proms.push(JSON.parse(get_breastcancerPROM(userName,userID)))\r\n        }\r\n      setProms(proms)\r\n     console.log(proms)\r\n    });\r\n    \r\n      \r\n  }\r\n\r\n  const handleCLick = e =>{\r\n    e.preventDefault();\r\n    setIsLogedIn(false);\r\n    localStorage.setItem('userName', '');\r\n    localStorage.setItem('userID', '');\r\n  }\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n    const userName = e.target.nameInput.value;\r\n    const userID = e.target.idInput.value;\r\n    const userObject = users.find(elem => elem.userName === userName && elem.userID === userID )\r\n    if(userObject){\r\n      setIsLogedIn(true);\r\n      setUser(userObject);\r\n      getProms(userObject);\r\n      history.push('/Patientdashboard');\r\n      localStorage.setItem('userName', userName);\r\n      localStorage.setItem('userID', userID);\r\n    }else{\r\n     document.getElementById('loginFormMsg').innerText = 'You have entered the wrong name or ID, please try again.'\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      {isLogedIn ? \r\n      <nav className=\"App-nav\">\r\n        <span className=\"navHolder\">\r\n        <NavBar />\r\n        </span>\r\n        <span className=\"logOutHolder\">\r\n        <Button onClick={e => handleCLick(e)}>\r\n          logOut\r\n        </Button>\r\n        </span>\r\n      </nav>\r\n      :''}\r\n      {\r\n        !isLogedIn ?\r\n        <form \r\n          id=\"logInform\"\r\n          onSubmit={(e)=> handleSubmit(e)}\r\n        >\r\n          <div className=\"loginField\">\r\n        \r\n            <InputGroup size=\"lg\">\r\n              <InputGroup.Text id=\"inputGroup-sizing-lg\">Name:</InputGroup.Text>\r\n              <FormControl aria-label=\"Name\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\" \r\n                            type='text'\r\n                            name=\"nameInput\"\r\n                            id=\"nameInput\"\r\n                            required \r\n                            placeholder=\"Name\"\r\n                            title=\"Enter your name\"\r\n                            />\r\n            </InputGroup>\r\n          </div>\r\n          <div className=\"loginField\">\r\n            \r\n          <InputGroup size=\"lg\">\r\n              <InputGroup.Text id=\"inputGroup-sizing-lg\">ID:</InputGroup.Text>\r\n              <FormControl aria-label=\"ID\"\r\n                            aria-describedby=\"inputGroup-sizing-sm\" \r\n                            type='text'\r\n                            name=\"idInput\"\r\n                            id=\"idInput\"\r\n                            required \r\n                            placeholder=\"ID\"\r\n                            title=\"Enter your ID\"\r\n                            />\r\n            </InputGroup>\r\n          </div>\r\n          <Button\r\n          variant=\"success\" \r\n          type=\"submit\"\r\n          value=\"LogIN\"\r\n          >\r\n            Login\r\n            </Button>\r\n          <p id=\"loginFormMsg\"></p>\r\n      </form>:\r\n     <Router \r\n        user= {user}\r\n        proms = {proms}\r\n     />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter  } from 'react-router-dom';\r\nReactDOM.render(\r\n  <BrowserRouter  >\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  </BrowserRouter >,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}