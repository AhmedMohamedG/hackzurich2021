{"version":3,"sources":["data/dummyData.js","data/dummyUserData.js","Dashboard.js","VoiceRecorder.js","Question.jsx","Prom.js","PatientDashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["breastcancerPROM","sections","tytle","questions","type","text","answers","number","get_breastcancerPROM","patientName","patientID","questionsObject","JSON","stringify","users","userName","userID","conditions","CHART_COLORS","data","labels","datasets","label","fill","backgroundColor","borderColor","options","scales","yAxes","ticks","beginAtZero","Dashboard","className","style","width","margin","VoiceRecorder","props","state","audioDetails","url","blob","chunks","duration","h","m","s","this","setState","file","formData","FormData","append","fetch","method","body","record","audioURL","showUIAudio","handleAudioStop","handleAudioUpload","handleReset","mimeTypeToUseWhenRecording","React","Component","Question","question","questionObj","Counter","console","log","length","marks","forEach","answer","push","value","parseInt","id","Box","sx","Slider","getAriaValueText","step","defaultValue","valueLabelDisplay","min","max","Prom","prom","questionsCounter","map","section","index","sectionIndex","PatientDashboard","user","proms","App","parse","useState","isLogedIn","setIsLogedIn","setUser","setProms","handleSubmit","e","preventDefault","target","nameInput","idInput","userObject","find","elem","obj","element","getProms","document","getElementById","innerText","Button","onClick","handleCLick","onSubmit","name","required","placeholder","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8f401653.chunk.js","sourcesContent":["const breastcancerPROM = {\r\n    sections:[\r\n    {tytle:'NoTitle',\r\n    questions:[{\r\n        type:'MultiAnswers',\r\n        text:'Do you have any trouble doing strenuous activities, like carrying a heavy shopping bag or a suitcase?',\r\n        answers:[{text: 'Not at all', number:'1'},{text:'A little',number:'2'}]\r\n    },\r\n    {\r\n        type:'MultiAnswers',\r\n        text:'Do you have any trouble taking a long walk?',\r\n        answers:[{text: 'Not at all', number:'1'},{text:'A little',number:'2'}]\r\n    },\r\n    ],},\r\n    {tytle:'During the past week:',    \r\n    questions:[{\r\n            type:'MultiAnswers',\r\n            text:'Were you limited in doing either your work or other daily activities?',\r\n            answers:[{text: 'Not at all', number:'1'},\r\n            {text:'A little',number:'2'}]\r\n        },\r\n        {\r\n            type:'MultiAnswers',\r\n            text:'Were you limited in pursuing your hobbies or other leisure time activities?',\r\n            answers:[\r\n                {text: 'Not at all', number:'1'},\r\n                {text:'A little',number:'2'}\r\n                ]\r\n        },\r\n        ]\r\n    }\r\n\r\n]\r\n    \r\n}\r\n\r\n\r\nexport const get_breastcancerPROM = (patientName,patientID )=>{\r\n    const questionsObject = { patientName,\r\n                                 patientID,\r\n                                 type:'breastcancerPROM',\r\n                                 questions:breastcancerPROM }\r\n    return JSON.stringify(questionsObject);\r\n}\r\n\r\nexport const get_lungcancerPROM = (patientName,patientID )=>{\r\n    const questionsObject = {patientName,\r\n                                patientID,\r\n                                type:'get_lungcancerPROM',\r\n                                questions:breastcancerPROM }\r\n    return JSON.stringify(questionsObject);\r\n}\r\n\r\nexport const get_coloncancerPROM = (patientName,patientID )=>{\r\n    const questionsObject = { patientName,\r\n                                patientID,\r\n                                type:'coloncancerPROM',\r\n                                questions:breastcancerPROM  }\r\n    return JSON.stringify(questionsObject);\r\n}\r\n\r\n","const users =[\r\n    {userName:'patient1',\r\n    userID:'1',\r\n    conditions:['breastCancer']},\r\n    {userName:'patient2',\r\n    userID:'2',\r\n    conditions:['lungCancer']},\r\n    {userName:'patient3',\r\n    userID:'3',\r\n    conditions:['colonCancer']},\r\n    {userName:'patient4',\r\n    userID:'4',\r\n    conditions:['lungCancer','colonCancer']},\r\n]\r\n\r\nexport default users;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst CHART_COLORS = {\r\n    red: 'rgb(255, 99, 132)',\r\n    orange: 'rgb(255, 159, 64)',\r\n    yellow: 'rgb(255, 205, 86)',\r\n    green: 'rgb(75, 192, 192)',\r\n    blue: 'rgb(54, 162, 235)',\r\n    purple: 'rgb(153, 102, 255)',\r\n    grey: 'rgb(201, 203, 207)'\r\n};\r\n\r\nconst data = {\r\n    labels: ['month 1', 'month 2', 'month 3', 'month 4', 'month 5', 'month 6', 'month 7', 'month 8', 'month 9', 'month 10'],\r\n    datasets: [\r\n        {\r\n            label: 'Head',\r\n            data: [1, 1, 2, 2, 3, 2, 2, 3, 4, 3, 3, 4, 4],\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.red,\r\n            borderColor: CHART_COLORS.red,\r\n        },\r\n        {\r\n            label: 'Food',\r\n            data: [1, 1, 1, 2, 2, 3, 2, 3, 3, 3, 3, 4, 4],\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.blue,\r\n            borderColor: CHART_COLORS.blue,\r\n        },\r\n        {\r\n            label: 'Activity',\r\n            data: [2, 2, 3, 2, 1, 3, 3, 3, 3, 3],\r\n            fill: false,\r\n            backgroundColor: CHART_COLORS.green,\r\n            borderColor: CHART_COLORS.green,\r\n        },\r\n    ],\r\n};\r\n\r\nconst options = {\r\n    scales: {\r\n        yAxes: [\r\n            {\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst Dashboard = () => (\r\n    <>\r\n        <div className='header'>\r\n            <h1>Monthly health breakdown</h1>\r\n        </div>\r\n        <div style={{ width: '50%', margin: 'auto' }}>\r\n            <Line data={data} options={options} />\r\n        </div>\r\n    </>\r\n);\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { Recorder } from 'react-voice-recorder'\r\n\r\nimport 'react-voice-recorder/dist/index.css'\r\nimport './VoiceRecorder.css';\r\n\r\n\r\nclass VoiceRecorder extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      audioDetails: {\r\n        url: null,\r\n        blob: null,\r\n        chunks: null,\r\n        duration: {\r\n          h: 0,\r\n          m: 0,\r\n          s: 0\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleAudioStop(data) {\r\n    this.setState({ audioDetails: data });\r\n  }\r\n\r\n  handleAudioUpload(file) {\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    fetch('/upload/image', {method: \"POST\", body: formData});\r\n  }\r\n\r\n  handleReset() {\r\n    const reset = {\r\n      url: null,\r\n      blob: null,\r\n      chunks: null,\r\n      duration: {\r\n        h: 0,\r\n        m: 0,\r\n        s: 0\r\n      }\r\n    };\r\n    this.setState({ audioDetails: reset });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ width: '50%', margin: 'auto' }}>\r\n          <Recorder\r\n            record={true}\r\n            // title={\"\"}\r\n            audioURL={this.state.audioDetails.url}\r\n            showUIAudio\r\n            handleAudioStop={data => this.handleAudioStop(data)}\r\n            handleAudioUpload={data => this.handleAudioUpload(data)}\r\n            handleReset={() => this.handleReset()}\r\n            mimeTypeToUseWhenRecording={`audio/webm`}\r\n          />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VoiceRecorder;","import React, { useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\n\r\nfunction Question(props) {\r\n  const {questionObj : question,Counter} = props;\r\n  console.log( 'min',question.answers[0].number)\r\n  console.log( 'max',question.answers[ question.answers.length -1].number)\r\n  const marks = []\r\n\r\n  question.answers.forEach(answer => {\r\n    marks.push({\r\n      value: parseInt(answer.number, 10),\r\n      label: answer.text,\r\n    })\r\n  }) \r\n    \r\n  console.log('marks', marks)\r\n   \r\n  /*const marks = [\r\n    {\r\n      value: question.answers[0].number,\r\n      label: question.answers[0].text,\r\n    },\r\n    {\r\n      value: question.answers[ question.answers.length -1].number,\r\n      label: question.answers[ question.answers.length -1].text,\r\n    },\r\n  ];*/\r\n  \r\n  function valuetext(value) {\r\n    return value;\r\n  }\r\n\r\n  return (\r\n    <div id={`question${Counter}`}className=\"question\">\r\n        <p>{question.text}</p>\r\n        \r\n\r\n    <div className=\"sliedContainer\">\r\n\r\n    <Box sx={{ width: 300 }}>\r\n      <Slider\r\n        aria-label=\"Custom marks\"\r\n        getAriaValueText={valuetext}\r\n        step={null}\r\n        defaultValue={1}\r\n        valueLabelDisplay=\"auto\"\r\n        marks={marks}\r\n        min={question.answers[0].number}\r\n        max={question.answers[ question.answers.length -1].number}\r\n      />\r\n    </Box>\r\n    </div>\r\n\r\n\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Question;","import React, { useState } from 'react';\r\nimport Question from './Question';\r\nfunction Prom(props) {\r\n  const {prom} = props;\r\n  let questionsCounter = 0;\r\n  return (\r\n    <div className=\"promContanier\">\r\n        {prom.questions.sections.map((section,index )=>{\r\n            const sectionIndex = index;\r\n            return(\r\n                <div className=\"QuestionsSection\">\r\n                {section?.tytle !== 'NoTitle'?<h1>{ section?.tytle}</h1>:''}\r\n                {section.questions.map((question,index) => {\r\n                    questionsCounter++\r\n                    return <Question \r\n                            Counter = {questionsCounter}\r\n                            key={`${sectionIndex}-${index}`}\r\n                            questionObj={question} />\r\n                })}\r\n                </div>\r\n\r\n            )\r\n        })}\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Prom;","import React, { useState } from 'react';\r\nimport Prom from './Prom.js'\r\nfunction PatientDashboard(props) {\r\n  const {user, proms} = props;\r\n  \r\n  return (\r\n    <div className=\"Patientdashboard\">\r\n{proms.map(prom =>{\r\n    return <Prom prom={prom} />\r\n})\r\n}    </div>\r\n  );\r\n}\r\n\r\nexport default PatientDashboard;\r\n","import './App.css';\r\nimport {get_breastcancerPROM} from './data/dummyData';\r\nimport users from './data/dummyUserData';\r\nimport React, { useState } from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport VoiceRecorder from './VoiceRecorder';\r\n\r\nimport PatientDashboard from './PatientDashboard'\r\nimport Button from '@mui/material/Button';\r\n\r\nfunction App() {\r\n  console.log('json data', JSON.parse(get_breastcancerPROM('patient1','patient1')))\r\n  const [isLogedIn, setIsLogedIn] = useState(false);\r\n  const [user, setUser] = useState(false);\r\n  const [proms, setProms] = useState([]);\r\n\r\n  const getProms = (obj) =>{\r\n    const {userName , userID , conditions} = obj;\r\n    const proms = [];\r\n    conditions.forEach(element => {\r\n  \r\n        if(element ==='breastCancer'){\r\n              proms.push(JSON.parse(get_breastcancerPROM(userName,userID)))\r\n              }\r\n        if(element === 'lungCancer'){\r\n          proms.push(JSON.parse(get_breastcancerPROM(userName,userID)))\r\n          }\r\n        if(element === 'colonCancer') {\r\n          proms.push(JSON.parse(get_breastcancerPROM(userName,userID)))\r\n        }\r\n      setProms(proms)\r\n     console.log(proms)\r\n    });\r\n    \r\n      \r\n  }\r\n\r\n  const handleCLick = e =>{\r\n    e.preventDefault();\r\n    setIsLogedIn(false);\r\n  }\r\n  const handleSubmit = (e) =>{\r\n    e.preventDefault();\r\n    const userName = e.target.nameInput.value;\r\n    const userID = e.target.idInput.value;\r\n    const userObject = users.find(elem => elem.userName === userName && elem.userID === userID )\r\n    if(userObject){\r\n      setIsLogedIn(true);\r\n      setUser(userObject);\r\n      getProms(userObject)\r\n    }else{\r\n     document.getElementById('loginFormMsg').innerText = 'You have entered the wrong name or ID, please try again.'\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n    <Dashboard />\r\n    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n    <VoiceRecorder />\r\n    <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n      <header className=\"App-header\">\r\n        <Button onClick={e => handleCLick(e)}>\r\n          logOut\r\n        </Button>\r\n      </header>\r\n      {\r\n        !isLogedIn ?\r\n        <form \r\n          id=\"logInform\"\r\n          onSubmit={(e)=> handleSubmit(e)}\r\n        >\r\n          <div>\r\n            <label>\r\n              Name:\r\n            </label>\r\n            <input type='text'\r\n                    name=\"nameInput\"\r\n                    id=\"nameInput\"\r\n                    required \r\n                    placeholder=\"Name\"\r\n                    title=\"Enter your name\"\r\n            >\r\n            </input>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              ID:\r\n            </label>\r\n            <input type='text'\r\n                    name=\"idInput\"\r\n                    id=\"idInput\"\r\n                    required \r\n                    placeholder=\"ID\"\r\n                    title=\"Enter your ID\"\r\n            >\r\n            </input>\r\n          </div>\r\n          <Button \r\n          type=\"submit\"\r\n          value=\"LogIN\"\r\n          >\r\n            Login\r\n            </Button>\r\n          <p id=\"loginFormMsg\"></p>\r\n      </form>:\r\n     <PatientDashboard \r\n        user= {user}\r\n        proms = {proms}\r\n     />\r\n      }\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}